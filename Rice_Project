# -*- coding: utf-8 -*-
"""Rice_Project

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ETPLPZu889-hbIwKuDTUTcb23UX8uEAZ
"""

from google.colab import drive
drive.mount('/content/drive/')


import pandas as pd
import numpy as np
import os
import cv2
import matplotlib.pyplot as plt
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.models import load_model
from PIL import Image
import pyheif
import os

"""***Function to Convert HEIC to JPG/PNG***"""

def convert_heic_to_jpeg(heic_path, jpeg_path):
    heif_file = pyheif.read(heic_path)
    image = Image.frombytes(
        heif_file.mode,
        heif_file.size,
        heif_file.data,
        "raw",
        heif_file.mode,
        heif_file.stride,
    )
    image.save(jpeg_path, "JPEG")

# Directory containing HEIC images
heic_directory = '/content/drive/MyDrive/Rice Project/Rice_Pics/'

# Convert all HEIC files to JPEG
for file_name in os.listdir(heic_directory):
    if file_name.lower().endswith('.heic'):
        heic_path = os.path.join(heic_directory, file_name)
        jpeg_path = os.path.join(heic_directory, file_name.replace('.HEIC', '.jpg'))
        convert_heic_to_jpeg(heic_path, jpeg_path)

"""***Function to Remove HEIC file from Google Drive***"""

def remove_heic_files(directory):
    """
    Removes all HEIC files from the specified directory.

    Args:
    - directory (str): Path to the directory from which HEIC files will be removed.
    """
    for file_name in os.listdir(directory):
        if file_name.lower().endswith('.heic'):
            file_path = os.path.join(directory, file_name)
            try:
                os.remove(file_path)
                print(f"Removed file: {file_path}")
            except Exception as e:
                print(f"Error removing file {file_path}: {e}")

# Path to the directory containing HEIC files
images_directory = '/content/drive/MyDrive/Rice Project/Rice_Pics/'

# Remove HEIC files
remove_heic_files(images_directory)

csv_path = '/content/drive/MyDrive/Rice Project/Rice_Project - Sheet1.csv'
images_path = '/content/drive/MyDrive/Rice Project/Rice_Pics'

data = pd.read_csv(csv_path, encoding='utf-8')

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
pd.set_option('display.width', None)
pd.set_option('display.max_colwidth', None)

data = pd.read_csv(csv_path, usecols=['Rice Grain', 'Quality'])
print(data)

"""***Function to load and preprocess images***"""

def load_images(image_names, image_dir, target_size=(128, 128)):
    images = []
    for img_name in image_names:
        img_path = os.path.join(image_dir, img_name)
        img = cv2.imread(img_path)
        if img is not None:
            # Convert BGR to RGB
            img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            # Resize image
            img = cv2.resize(img, target_size)
            images.append(img)
        else:
            print(f"Error loading image: {img_path}")
    return np.array(images)

"""***Load the images***"""

image_names = data['Rice Grain'].values
images = load_images(image_names, images_path)

"""***Normalize the images***"""

images = load_images(image_names, images_path)
images = images / 255.0

"""***Convert labels to categorical***

"""

labels = data['Quality'].values
labels = to_categorical(labels, num_classes=2)

"""***Split the data into training and validation sets***"""

X_train, X_val, y_train, y_val = train_test_split(images, labels, test_size=0.2, random_state=42)

"""***Display some sample images***"""

plt.figure(figsize=(10, 10))
for i in range(9):
    plt.subplot(3, 3, i + 1)
    plt.imshow(X_train[i])
    title = f"{image_names[i]} - {'Affected' if np.argmax(y_train[i]) == 1 else 'Unaffected'}"
    plt.title(title)
    plt.axis('off')
plt.show()

"""***Build the model***"""

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(128, 128, 3)),
    MaxPooling2D((2, 2)),
    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dropout(0.5),
    Dense(2, activation='softmax')
])

"""***Compile the model***"""

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

"""***Define the data generator***"""

datagen = ImageDataGenerator(
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True
)

"""*** Train the model***"""

history = model.fit(datagen.flow(X_train, y_train, batch_size=32),
                    validation_data=(X_val, y_val),
                    epochs=25,
                    verbose=1)

"""***Evaluate the model***"""

loss, accuracy = model.evaluate(X_val, y_val)
print(f'Validation accuracy: {accuracy*100:.2f}%')

"""***Save the Model***"""

model.save('/content/drive/MyDrive/Rice Project/my_model.keras')

# Load model architecture and weights only
model = load_model('/content/drive/MyDrive/Rice Project/my_model.keras', compile=False)

# Compile the model manually
model.compile(optimizer='rmsprop', loss='binary_crossentropy', metrics=['accuracy'])
